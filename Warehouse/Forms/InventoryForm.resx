<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="menuStrip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAADjsAAA47AAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAADwAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAADwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4AAACpAAAA4gAAAOAAAADgAAAA4AAAAOAAAADgAAAA4AAA
        AOIAAACpAAAADgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHgAAAOAAAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAOAAAAAeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAeAAAA4AAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA4AAAAB8AAAAAAAAADwAAAB8AAAAfAAAAHwAAAB8AAAAfAAAAHwAA
        AB8AAAAfAAAAHwAAAB8AAAAfAAAAHwAAAB8AAAAfAAAADwAAAAAAAAAAAAAAAAAAAB4AAADgAAAA/wAA
        AP0AAADvAAAA/QAAAP0AAADvAAAA/QAAAP8AAADgAAAAHgAAAAwAAACpAAAA4gAAAOAAAADgAAAA4AAA
        AOAAAADgAAAA4AAAAOAAAADgAAAA4AAAAOAAAADgAAAA4AAAAOIAAACpAAAADgAAAAAAAAAAAAAAHgAA
        AOAAAAD/AAAA5wAAAEoAAACFAAAAhQAAAEoAAADnAAAA/wAAAOAAAAAdAAAAHAAAAOAAAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAOAAAAAeAAAAAAAA
        AAAAAAAeAAAA4AAAAP8AAADfAAAALQAAADwAAAA8AAAALQAAAN8AAAD/AAAA4AAAAB0AAAAdAAAA4AAA
        AP8AAAD9AAAA7wAAAP0AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA4AAA
        AB4AAAAAAAAAAAAAAB4AAADgAAAA/wAAAN4AAAA+AAAA1gAAANYAAAA+AAAA3gAAAP8AAADgAAAAHAAA
        AB0AAADgAAAA/wAAAK0AAAA5AAAArgAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAADgAAAAHgAAAAAAAAAAAAAADgAAAKkAAADkAAAAwwAAADYAAADGAAAAxgAAADYAAADDAAAA5AAA
        AKkAAAAMAAAAHgAAAOEAAADwAAAAXgAAAHIAAAA2AAAArQAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAOAAAAAeAAAAAAAAAAAAAAAAAAAADgAAAB0AAAAZAAAABwAAABoAAAAaAAAABwAA
        ABkAAAAdAAAADgAAAAAAAAAfAAAA4AAAAP8AAADuAAAA/QAAAK0AAABcAAAA7gAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA4AAAAB4AAAAAAAAAAAAAAAAAAAAOAAAAHQAAAB0AAAAfAAAAHQAA
        AB0AAAAfAAAAHQAAAB0AAAAOAAAAAAAAAB8AAADgAAAA/wAAAP8AAAD/AAAA/QAAAO4AAAD9AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADgAAAAHgAAAAAAAAAAAAAADgAAAKkAAADiAAAA4AAA
        AOAAAADgAAAA4AAAAOAAAADgAAAA4gAAAKkAAAAMAAAAHgAAAOAAAAD/AAAA/QAAAO8AAAD9AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAOAAAAAeAAAAAAAAAAAAAAAeAAAA4AAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA4AAAABwAAAAdAAAA4AAAAP8AAACtAAAAOQAA
        AK4AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA4AAAAB4AAAAAAAAAAAAA
        AB4AAADgAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADgAAAAHQAAAB0AAADhAAAA8AAA
        AF4AAAByAAAANgAAAK0AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADgAAAAHgAA
        AAAAAAAAAAAAHgAAAOAAAAD/AAAA/QAAAO8AAAD9AAAA/QAAAO8AAAD9AAAA/wAAAOAAAAAdAAAAHQAA
        AOAAAAD/AAAA7gAAAP0AAACtAAAAXAAAAO4AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AOAAAAAeAAAAAAAAAAAAAAAeAAAA4AAAAP8AAADnAAAASgAAAIUAAACFAAAASgAAAOcAAAD/AAAA4AAA
        AB0AAAAdAAAA4AAAAP8AAAD/AAAA/wAAAP0AAADuAAAA/QAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA4AAAAB4AAAAAAAAAAAAAAB4AAADgAAAA/wAAAN8AAAAtAAAAPAAAADwAAAAtAAAA3wAA
        AP8AAADgAAAAHQAAAB0AAADgAAAA/wAAAP0AAADvAAAA/QAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAADgAAAAHgAAAAAAAAAAAAAAHgAAAOAAAAD/AAAA3gAAAD4AAADWAAAA1gAA
        AD4AAADeAAAA/wAAAOAAAAAcAAAAHQAAAOAAAAD/AAAArQAAADkAAACuAAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAOAAAAAeAAAAAAAAAAAAAAAOAAAAqQAAAOQAAADDAAAANgAA
        AMYAAADGAAAANgAAAMMAAADkAAAAqQAAAAwAAAAeAAAA4QAAAPAAAABeAAAAcgAAADYAAACtAAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA4AAAAB4AAAAAAAAAAAAAAAAAAAAOAAAAHQAA
        ABkAAAAHAAAAGgAAABoAAAAHAAAAGQAAAB0AAAAOAAAAAAAAAB8AAADgAAAA/wAAAO4AAAD9AAAArQAA
        AFwAAADuAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADgAAAAHgAAAAAAAAAAAAAAAAAA
        AA4AAAAdAAAAHQAAAB8AAAAdAAAAHQAAAB8AAAAdAAAAHQAAAA4AAAAAAAAAHwAAAOAAAAD/AAAA/wAA
        AP8AAAD9AAAA7gAAAP0AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAOAAAAAeAAAAAAAA
        AAAAAAAOAAAAqQAAAOIAAADgAAAA4AAAAOAAAADgAAAA4AAAAOAAAADiAAAAqQAAAAwAAAAeAAAA4AAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA4AAA
        AB4AAAAAAAAAAAAAAB4AAADgAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADgAAAAHAAA
        AB0AAADgAAAA/wAAAP8AAAD/AAAA8AAAAN4AAADeAAAA3gAAAN4AAADeAAAA3gAAAPAAAAD/AAAA/wAA
        AP8AAADgAAAAHgAAAAAAAAAAAAAAHgAAAOAAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AOAAAAAdAAAAHQAAAOAAAAD/AAAA/wAAAPAAAABaAAAANwAAAD0AAAA9AAAAPQAAAD0AAAA3AAAAWgAA
        APAAAAD/AAAA/wAAAOAAAAAeAAAAAAAAAAAAAAAeAAAA4AAAAP8AAAD9AAAA7wAAAP0AAAD9AAAA7wAA
        AP0AAAD/AAAA4AAAAB0AAAAcAAAA4AAAAP8AAAD/AAAA3wAAADoAAADDAAAA4gAAAOAAAADgAAAA4gAA
        AMMAAAA6AAAA3wAAAP8AAAD/AAAA4AAAAB4AAAAAAAAAAAAAAB4AAADgAAAA/wAAAOcAAABKAAAAhQAA
        AIUAAABKAAAA5wAAAP8AAADgAAAAHgAAAAwAAACpAAAA4gAAAOIAAADDAAAANgAAAMUAAADkAAAA4gAA
        AOIAAADkAAAAxQAAADYAAADDAAAA4gAAAOIAAACpAAAADgAAAAAAAAAAAAAAHgAAAOAAAAD/AAAA3wAA
        AC0AAAA8AAAAPAAAAC0AAADfAAAA/wAAAOAAAAAfAAAAAAAAAA8AAAAfAAAAHwAAABsAAAAHAAAAGwAA
        AB8AAAAfAAAAHwAAAB8AAAAbAAAABwAAABsAAAAfAAAAHwAAAA8AAAAAAAAAAAAAAAAAAAAeAAAA4AAA
        AP8AAADeAAAAPgAAANYAAADWAAAAPgAAAN4AAAD/AAAA4AAAAB4AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AA4AAACpAAAA5AAAAMMAAAA2AAAAxgAAAMYAAAA2AAAAwwAAAOQAAACpAAAADgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAA8AAAAeAAAAGgAAAAcAAAAaAAAAGgAAAAcAAAAaAAAAHgAAAA8AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/////8AP//+AB///gAf//4AEAAOAAAABgAAAAYAAAAGAAAABgAAAAcAI
        AAHACAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAHACAABwAgAAYAAAAGAAAABgAAAAYAA
        AAGAAAABgAQAA4AH//+AB///wA////////8=
</value>
  </data>
</root>